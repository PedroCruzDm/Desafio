{"ast":null,"code":"import axios from 'axios';\n\n// Definir URL base da API com suporte a ambiente de desenvolvimento/produção\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Configuração do cliente Axios com timeout maior para redes mais lentas\nconst api = axios.create({\n  baseURL: API_URL,\n  timeout: 15000,\n  // 15 segundos\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Contador para tentativas de reconexão\nlet connectionAttempts = 0;\nconst MAX_RECONNECT_ATTEMPTS = 3;\n\n// Variável para controlar o estado de conexão\nlet serverStatus = {\n  online: false,\n  lastCheck: null,\n  message: 'Não verificado'\n};\n\n// Interceptor para logs e tratamento unificado de erros\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`[API Request] ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} ${config.url}`, config.data || '');\n  return config;\n}, error => {\n  console.error('[API Request Error]', error);\n  return Promise.reject(error);\n});\napi.interceptors.response.use(response => {\n  console.log(`[API Response] Status: ${response.status}`, response.data);\n\n  // Atualizar status do servidor quando houver uma resposta bem-sucedida\n  serverStatus = {\n    online: true,\n    lastCheck: new Date(),\n    message: 'Servidor online'\n  };\n\n  // Resetar contador de tentativas quando há uma resposta bem-sucedida\n  connectionAttempts = 0;\n  return response;\n}, async error => {\n  // Verificar se é um erro de timeout ou conexão recusada\n  const isConnectionError = !error.response && (error.code === 'ECONNABORTED' || error.message.includes('Network Error') || error.message.includes('timeout'));\n  if (isConnectionError) {\n    console.error('[API Connection Error]', error.message);\n\n    // Atualizar status do servidor\n    serverStatus = {\n      online: false,\n      lastCheck: new Date(),\n      message: `Erro de conexão: ${error.message}`\n    };\n\n    // Tentar reconectar se ainda não excedeu o número máximo de tentativas\n    if (connectionAttempts < MAX_RECONNECT_ATTEMPTS) {\n      connectionAttempts++;\n      console.log(`Tentativa de reconexão ${connectionAttempts}/${MAX_RECONNECT_ATTEMPTS}...`);\n\n      // Aguardar 2 segundos antes de tentar novamente\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      // Tentar novamente a requisição\n      try {\n        return await api.request(error.config);\n      } catch (retryError) {\n        console.error('Falha na tentativa de reconexão:', retryError);\n      }\n    }\n    error.isConnectionError = true;\n    error.customMessage = 'Não foi possível conectar ao servidor. Verifique se o servidor está rodando.';\n  } else if (error.response) {\n    // Erro com resposta do servidor\n    console.error(`[API Error] Status: ${error.response.status}`, error.response.data);\n\n    // Customizar mensagens de erro com base no status HTTP\n    switch (error.response.status) {\n      case 400:\n        error.customMessage = `Dados inválidos: ${error.response.data.error || 'Verifique os dados enviados'}`;\n        break;\n      case 404:\n        error.customMessage = 'Recurso não encontrado';\n        break;\n      case 409:\n        error.customMessage = `Conflito: ${error.response.data.error || 'Verifique se os dados são únicos'}`;\n        break;\n      case 500:\n        error.customMessage = 'Erro interno do servidor. Tente novamente mais tarde.';\n        break;\n      default:\n        error.customMessage = error.response.data.error || 'Ocorreu um erro na operação';\n    }\n\n    // Marcar o servidor como online mesmo com erro, pois houve resposta\n    serverStatus = {\n      online: true,\n      lastCheck: new Date(),\n      message: 'Servidor online (com erro)'\n    };\n  }\n  return Promise.reject(error);\n});\n\n// Verificar status do servidor\nexport const checkServerStatus = async (forceCheck = false) => {\n  // Se já verificamos recentemente e não é forçado, retornar o status armazenado\n  const CACHE_TIME = 10000; // 10 segundos\n  if (!forceCheck && serverStatus.lastCheck && new Date() - serverStatus.lastCheck < CACHE_TIME) {\n    return serverStatus;\n  }\n  try {\n    const response = await api.get('/status');\n    serverStatus = {\n      online: true,\n      lastCheck: new Date(),\n      message: response.data.message || 'Servidor online'\n    };\n    return serverStatus;\n  } catch (error) {\n    console.error('Erro ao verificar status do servidor:', error);\n    serverStatus = {\n      online: false,\n      lastCheck: new Date(),\n      message: 'Servidor offline'\n    };\n    return serverStatus;\n  }\n};\n\n// Buscar todas as equipes\nexport const getEquipes = async () => {\n  try {\n    const response = await api.get('/equipes');\n    return response.data;\n  } catch (error) {\n    console.error('Erro ao buscar equipes:', error);\n    throw error;\n  }\n};\n\n// Buscar uma equipe específica\nexport const getEquipe = async id => {\n  try {\n    const response = await api.get(`/equipes/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Erro ao buscar equipe ${id}:`, error);\n    throw error;\n  }\n};\n\n// Criar uma nova equipe\nexport const createEquipe = async equipe => {\n  try {\n    var _equipe$nome, _equipe$descricao, _equipe$responsavel;\n    // Verificar status do servidor antes de tentar criar\n    const status = await checkServerStatus();\n    if (!status.online) {\n      throw new Error('Servidor offline. Não é possível criar uma equipe no momento.');\n    }\n    console.log('Enviando dados para criar equipe:', equipe);\n\n    // Validar dados antes de enviar\n    const equipeValidada = {\n      nome: (_equipe$nome = equipe.nome) === null || _equipe$nome === void 0 ? void 0 : _equipe$nome.trim(),\n      descricao: ((_equipe$descricao = equipe.descricao) === null || _equipe$descricao === void 0 ? void 0 : _equipe$descricao.trim()) || '',\n      responsavel: ((_equipe$responsavel = equipe.responsavel) === null || _equipe$responsavel === void 0 ? void 0 : _equipe$responsavel.trim()) || '',\n      max_participantes: parseInt(equipe.max_participantes) || 10\n    };\n    if (!equipeValidada.nome) {\n      throw new Error('O nome da equipe é obrigatório');\n    }\n    const response = await api.post('/equipes', equipeValidada);\n    return response.data;\n  } catch (error) {\n    console.error('Erro ao criar equipe:', error);\n\n    // Retornar o erro para tratamento no componente\n    if (error.isConnectionError) {\n      // Verificar se o servidor está rodando antes de falhar\n      try {\n        await checkServerStatus(true);\n      } catch (statusError) {\n        console.error('Confirmado que o servidor está offline:', statusError);\n      }\n    }\n    throw error;\n  }\n};\n\n// Atualizar uma equipe existente\nexport const updateEquipe = async (id, equipe) => {\n  try {\n    // Verificar status do servidor antes de tentar atualizar\n    const status = await checkServerStatus();\n    if (!status.online) {\n      throw new Error('Servidor offline. Não é possível atualizar a equipe no momento.');\n    }\n    const response = await api.put(`/equipes/${id}`, equipe);\n    return response.data;\n  } catch (error) {\n    console.error(`Erro ao atualizar equipe ${id}:`, error);\n    throw error;\n  }\n};\n\n// Excluir uma equipe\nexport const deleteEquipe = async id => {\n  try {\n    // Verificar status do servidor antes de tentar excluir\n    const status = await checkServerStatus();\n    if (!status.online) {\n      throw new Error('Servidor offline. Não é possível excluir a equipe no momento.');\n    }\n    const response = await api.delete(`/equipes/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Erro ao excluir equipe ${id}:`, error);\n    throw error;\n  }\n};\n\n// Verificar vagas disponíveis em uma equipe\nexport const verificarVagasEquipe = async id => {\n  try {\n    const response = await api.get(`/equipes/${id}/vagas`);\n    return response.data;\n  } catch (error) {\n    console.error(`Erro ao verificar vagas da equipe ${id}:`, error);\n    throw error;\n  }\n};\n\n// Exportar o objeto de status do servidor para componentes que precisam monitorar\nexport const getServerStatusObject = () => serverStatus;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","connectionAttempts","MAX_RECONNECT_ATTEMPTS","serverStatus","online","lastCheck","message","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","data","error","Promise","reject","response","status","Date","isConnectionError","code","includes","resolve","setTimeout","retryError","customMessage","checkServerStatus","forceCheck","CACHE_TIME","get","getEquipes","getEquipe","id","createEquipe","equipe","_equipe$nome","_equipe$descricao","_equipe$responsavel","Error","equipeValidada","nome","trim","descricao","responsavel","max_participantes","parseInt","post","statusError","updateEquipe","put","deleteEquipe","delete","verificarVagasEquipe","getServerStatusObject"],"sources":["C:/Users/joaop/OneDrive/Documentos/atividades/desafios/Desafio1/frontend/src/services/equipeService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Definir URL base da API com suporte a ambiente de desenvolvimento/produção\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n// Configuração do cliente Axios com timeout maior para redes mais lentas\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  timeout: 15000, // 15 segundos\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\n// Contador para tentativas de reconexão\r\nlet connectionAttempts = 0;\r\nconst MAX_RECONNECT_ATTEMPTS = 3;\r\n\r\n// Variável para controlar o estado de conexão\r\nlet serverStatus = {\r\n  online: false,\r\n  lastCheck: null,\r\n  message: 'Não verificado'\r\n};\r\n\r\n// Interceptor para logs e tratamento unificado de erros\r\napi.interceptors.request.use(\r\n  config => {\r\n    console.log(`[API Request] ${config.method?.toUpperCase()} ${config.url}`, config.data || '');\r\n    return config;\r\n  },\r\n  error => {\r\n    console.error('[API Request Error]', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\napi.interceptors.response.use(\r\n  response => {\r\n    console.log(`[API Response] Status: ${response.status}`, response.data);\r\n    \r\n    // Atualizar status do servidor quando houver uma resposta bem-sucedida\r\n    serverStatus = {\r\n      online: true,\r\n      lastCheck: new Date(),\r\n      message: 'Servidor online'\r\n    };\r\n    \r\n    // Resetar contador de tentativas quando há uma resposta bem-sucedida\r\n    connectionAttempts = 0;\r\n    \r\n    return response;\r\n  },\r\n  async error => {\r\n    // Verificar se é um erro de timeout ou conexão recusada\r\n    const isConnectionError = !error.response && (\r\n      error.code === 'ECONNABORTED' || \r\n      error.message.includes('Network Error') ||\r\n      error.message.includes('timeout')\r\n    );\r\n    \r\n    if (isConnectionError) {\r\n      console.error('[API Connection Error]', error.message);\r\n      \r\n      // Atualizar status do servidor\r\n      serverStatus = {\r\n        online: false,\r\n        lastCheck: new Date(),\r\n        message: `Erro de conexão: ${error.message}`\r\n      };\r\n      \r\n      // Tentar reconectar se ainda não excedeu o número máximo de tentativas\r\n      if (connectionAttempts < MAX_RECONNECT_ATTEMPTS) {\r\n        connectionAttempts++;\r\n        console.log(`Tentativa de reconexão ${connectionAttempts}/${MAX_RECONNECT_ATTEMPTS}...`);\r\n        \r\n        // Aguardar 2 segundos antes de tentar novamente\r\n        await new Promise(resolve => setTimeout(resolve, 2000));\r\n        \r\n        // Tentar novamente a requisição\r\n        try {\r\n          return await api.request(error.config);\r\n        } catch (retryError) {\r\n          console.error('Falha na tentativa de reconexão:', retryError);\r\n        }\r\n      }\r\n      \r\n      error.isConnectionError = true;\r\n      error.customMessage = 'Não foi possível conectar ao servidor. Verifique se o servidor está rodando.';\r\n    } else if (error.response) {\r\n      // Erro com resposta do servidor\r\n      console.error(`[API Error] Status: ${error.response.status}`, error.response.data);\r\n      \r\n      // Customizar mensagens de erro com base no status HTTP\r\n      switch (error.response.status) {\r\n        case 400:\r\n          error.customMessage = `Dados inválidos: ${error.response.data.error || 'Verifique os dados enviados'}`;\r\n          break;\r\n        case 404:\r\n          error.customMessage = 'Recurso não encontrado';\r\n          break;\r\n        case 409:\r\n          error.customMessage = `Conflito: ${error.response.data.error || 'Verifique se os dados são únicos'}`;\r\n          break;\r\n        case 500:\r\n          error.customMessage = 'Erro interno do servidor. Tente novamente mais tarde.';\r\n          break;\r\n        default:\r\n          error.customMessage = error.response.data.error || 'Ocorreu um erro na operação';\r\n      }\r\n      \r\n      // Marcar o servidor como online mesmo com erro, pois houve resposta\r\n      serverStatus = {\r\n        online: true,\r\n        lastCheck: new Date(),\r\n        message: 'Servidor online (com erro)'\r\n      };\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Verificar status do servidor\r\nexport const checkServerStatus = async (forceCheck = false) => {\r\n  // Se já verificamos recentemente e não é forçado, retornar o status armazenado\r\n  const CACHE_TIME = 10000; // 10 segundos\r\n  if (\r\n    !forceCheck && \r\n    serverStatus.lastCheck && \r\n    (new Date() - serverStatus.lastCheck) < CACHE_TIME\r\n  ) {\r\n    return serverStatus;\r\n  }\r\n  \r\n  try {\r\n    const response = await api.get('/status');\r\n    \r\n    serverStatus = {\r\n      online: true,\r\n      lastCheck: new Date(),\r\n      message: response.data.message || 'Servidor online'\r\n    };\r\n    \r\n    return serverStatus;\r\n  } catch (error) {\r\n    console.error('Erro ao verificar status do servidor:', error);\r\n    \r\n    serverStatus = {\r\n      online: false,\r\n      lastCheck: new Date(),\r\n      message: 'Servidor offline'\r\n    };\r\n    \r\n    return serverStatus;\r\n  }\r\n};\r\n\r\n// Buscar todas as equipes\r\nexport const getEquipes = async () => {\r\n  try {\r\n    const response = await api.get('/equipes');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Erro ao buscar equipes:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Buscar uma equipe específica\r\nexport const getEquipe = async (id) => {\r\n  try {\r\n    const response = await api.get(`/equipes/${id}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Erro ao buscar equipe ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Criar uma nova equipe\r\nexport const createEquipe = async (equipe) => {\r\n  try {\r\n    // Verificar status do servidor antes de tentar criar\r\n    const status = await checkServerStatus();\r\n    if (!status.online) {\r\n      throw new Error('Servidor offline. Não é possível criar uma equipe no momento.');\r\n    }\r\n    \r\n    console.log('Enviando dados para criar equipe:', equipe);\r\n    \r\n    // Validar dados antes de enviar\r\n    const equipeValidada = {\r\n      nome: equipe.nome?.trim(),\r\n      descricao: equipe.descricao?.trim() || '',\r\n      responsavel: equipe.responsavel?.trim() || '',\r\n      max_participantes: parseInt(equipe.max_participantes) || 10\r\n    };\r\n    \r\n    if (!equipeValidada.nome) {\r\n      throw new Error('O nome da equipe é obrigatório');\r\n    }\r\n    \r\n    const response = await api.post('/equipes', equipeValidada);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Erro ao criar equipe:', error);\r\n    \r\n    // Retornar o erro para tratamento no componente\r\n    if (error.isConnectionError) {\r\n      // Verificar se o servidor está rodando antes de falhar\r\n      try {\r\n        await checkServerStatus(true);\r\n      } catch (statusError) {\r\n        console.error('Confirmado que o servidor está offline:', statusError);\r\n      }\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// Atualizar uma equipe existente\r\nexport const updateEquipe = async (id, equipe) => {\r\n  try {\r\n    // Verificar status do servidor antes de tentar atualizar\r\n    const status = await checkServerStatus();\r\n    if (!status.online) {\r\n      throw new Error('Servidor offline. Não é possível atualizar a equipe no momento.');\r\n    }\r\n    \r\n    const response = await api.put(`/equipes/${id}`, equipe);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Erro ao atualizar equipe ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Excluir uma equipe\r\nexport const deleteEquipe = async (id) => {\r\n  try {\r\n    // Verificar status do servidor antes de tentar excluir\r\n    const status = await checkServerStatus();\r\n    if (!status.online) {\r\n      throw new Error('Servidor offline. Não é possível excluir a equipe no momento.');\r\n    }\r\n    \r\n    const response = await api.delete(`/equipes/${id}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Erro ao excluir equipe ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Verificar vagas disponíveis em uma equipe\r\nexport const verificarVagasEquipe = async (id) => {\r\n  try {\r\n    const response = await api.get(`/equipes/${id}/vagas`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Erro ao verificar vagas da equipe ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Exportar o objeto de status do servidor para componentes que precisam monitorar\r\nexport const getServerStatusObject = () => serverStatus;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}