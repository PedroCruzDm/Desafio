{"ast":null,"code":"import axios from 'axios';\n\n// Configuração da URL base da API\nconst API_URL = 'http://localhost:5000/api';\n\n// Variável para armazenar o status do servidor\nlet serverStatus = {\n  online: false,\n  lastCheck: null,\n  message: 'Não verificado'\n};\n\n// Configuração do axios com timeout\nconst api = axios.create({\n  baseURL: API_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Log da configuração para depuração\nconsole.log('API está configurada para:', API_URL);\n\n// Log de requisições\napi.interceptors.request.use(config => {\n  console.log('[API Request]', config.method.toUpperCase(), config.url, config.data || '');\n  return config;\n}, error => {\n  console.error('[API Request Error]', error);\n  return Promise.reject(error);\n});\n\n// Log de respostas\napi.interceptors.response.use(response => {\n  console.log('[API Response] Status:', response.status, response.data);\n  // Atualizar status do servidor quando houver uma resposta bem-sucedida\n  serverStatus = {\n    online: true,\n    lastCheck: new Date(),\n    message: 'Servidor online'\n  };\n  return response;\n}, error => {\n  if (error.response) {\n    console.log('[API Error] Status:', error.response.status, error.response.data);\n    // O servidor respondeu com um status diferente de 2xx\n    serverStatus = {\n      online: true,\n      // ainda está online, só retornou um erro\n      lastCheck: new Date(),\n      message: `Erro: ${error.response.status}`\n    };\n  } else if (error.request) {\n    console.error('[API Network Error]', error.message, error.request);\n    // Não recebeu resposta, servidor offline\n    serverStatus = {\n      online: false,\n      lastCheck: new Date(),\n      message: 'Servidor offline'\n    };\n  } else {\n    console.error('[API Error]', error.message);\n    // Algo aconteceu na configuração da requisição\n    serverStatus = {\n      online: false,\n      lastCheck: new Date(),\n      message: 'Erro de configuração'\n    };\n  }\n  return Promise.reject(error);\n});\n\n// Verificar status do servidor\nexport const checkServerStatus = async () => {\n  try {\n    const response = await api.get('/status');\n    serverStatus = {\n      online: true,\n      lastCheck: new Date(),\n      message: response.data.message || 'Servidor online'\n    };\n    return serverStatus;\n  } catch (error) {\n    console.error('Erro ao verificar status do servidor:', error);\n    serverStatus = {\n      online: false,\n      lastCheck: new Date(),\n      message: 'Servidor offline'\n    };\n    return serverStatus;\n  }\n};\n\n// Retornar o objeto de status atual sem fazer requisição\nexport const getServerStatusObject = () => {\n  // Se o último check foi há mais de 30 segundos, considera desatualizado\n  const isStale = !serverStatus.lastCheck || new Date() - serverStatus.lastCheck > 30000;\n  return {\n    ...serverStatus,\n    stale: isStale\n  };\n};\n\n// Buscar todas as equipes\nexport const getEquipes = async () => {\n  try {\n    console.log('Buscando todas as equipes...');\n    const response = await api.get('/equipes');\n    return response.data;\n  } catch (error) {\n    console.error('Erro ao buscar equipes:', error);\n    throw error;\n  }\n};\n\n// Buscar uma equipe específica\nexport const getEquipe = async id => {\n  try {\n    const response = await api.get(`/equipes/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Erro ao buscar equipe ${id}:`, error);\n    throw error;\n  }\n};\n\n// Criar uma nova equipe\nexport const createEquipe = async equipe => {\n  try {\n    console.log('Enviando dados para criar equipe:', equipe);\n\n    // Validar dados\n    if (!equipe.nome) {\n      throw new Error('Nome da equipe é obrigatório');\n    }\n    const response = await api.post('/equipes', equipe);\n    return response.data;\n  } catch (error) {\n    console.error('Erro ao criar equipe:', error);\n    if (!error.response && error.message.includes('Network Error')) {\n      error.customMessage = 'Falha na conexão com o servidor. Verifique se o backend está rodando e acessível.';\n    } else if (error.response) {\n      var _error$response$data;\n      error.customMessage = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Erro ao criar equipe';\n    } else {\n      error.customMessage = error.message || 'Erro desconhecido ao criar equipe';\n    }\n    throw error;\n  }\n};\n\n// Atualizar uma equipe existente\nexport const updateEquipe = async (id, equipe) => {\n  try {\n    const response = await api.put(`/equipes/${id}`, equipe);\n    return response.data;\n  } catch (error) {\n    console.error(`Erro ao atualizar equipe ${id}:`, error);\n    throw error;\n  }\n};\n\n// Excluir uma equipe\nexport const deleteEquipe = async id => {\n  try {\n    const response = await api.delete(`/equipes/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Erro ao excluir equipe ${id}:`, error);\n    throw error;\n  }\n};\n\n// Verificar vagas disponíveis em uma equipe\nexport const verificarVagasEquipe = async id => {\n  try {\n    const response = await api.get(`/equipes/${id}/vagas`);\n    return response.data;\n  } catch (error) {\n    console.error(`Erro ao verificar vagas da equipe ${id}:`, error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","serverStatus","online","lastCheck","message","api","create","baseURL","timeout","headers","console","log","interceptors","request","use","config","method","toUpperCase","url","data","error","Promise","reject","response","status","Date","checkServerStatus","get","getServerStatusObject","isStale","stale","getEquipes","getEquipe","id","createEquipe","equipe","nome","Error","post","includes","customMessage","_error$response$data","updateEquipe","put","deleteEquipe","delete","verificarVagasEquipe"],"sources":["C:/Users/joaop/OneDrive/Documentos/atividades/desafios/Desafio1/frontend/src/services/equipeService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Configuração da URL base da API\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\n// Variável para armazenar o status do servidor\r\nlet serverStatus = { online: false, lastCheck: null, message: 'Não verificado' };\r\n\r\n// Configuração do axios com timeout\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\n// Log da configuração para depuração\r\nconsole.log('API está configurada para:', API_URL);\r\n\r\n// Log de requisições\r\napi.interceptors.request.use(\r\n  config => {\r\n    console.log('[API Request]', config.method.toUpperCase(), config.url, config.data || '');\r\n    return config;\r\n  },\r\n  error => {\r\n    console.error('[API Request Error]', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Log de respostas\r\napi.interceptors.response.use(\r\n  response => {\r\n    console.log('[API Response] Status:', response.status, response.data);\r\n    // Atualizar status do servidor quando houver uma resposta bem-sucedida\r\n    serverStatus = {\r\n      online: true,\r\n      lastCheck: new Date(),\r\n      message: 'Servidor online'\r\n    };\r\n    return response;\r\n  },\r\n  error => {\r\n    if (error.response) {\r\n      console.log('[API Error] Status:', error.response.status, error.response.data);\r\n      // O servidor respondeu com um status diferente de 2xx\r\n      serverStatus = {\r\n        online: true, // ainda está online, só retornou um erro\r\n        lastCheck: new Date(),\r\n        message: `Erro: ${error.response.status}`\r\n      };\r\n    } else if (error.request) {\r\n      console.error('[API Network Error]', error.message, error.request);\r\n      // Não recebeu resposta, servidor offline\r\n      serverStatus = {\r\n        online: false,\r\n        lastCheck: new Date(),\r\n        message: 'Servidor offline'\r\n      };\r\n    } else {\r\n      console.error('[API Error]', error.message);\r\n      // Algo aconteceu na configuração da requisição\r\n      serverStatus = {\r\n        online: false,\r\n        lastCheck: new Date(),\r\n        message: 'Erro de configuração'\r\n      };\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Verificar status do servidor\r\nexport const checkServerStatus = async () => {\r\n  try {\r\n    const response = await api.get('/status');\r\n    serverStatus = {\r\n      online: true,\r\n      lastCheck: new Date(),\r\n      message: response.data.message || 'Servidor online'\r\n    };\r\n    return serverStatus;\r\n  } catch (error) {\r\n    console.error('Erro ao verificar status do servidor:', error);\r\n    serverStatus = {\r\n      online: false,\r\n      lastCheck: new Date(),\r\n      message: 'Servidor offline'\r\n    };\r\n    return serverStatus;\r\n  }\r\n};\r\n\r\n// Retornar o objeto de status atual sem fazer requisição\r\nexport const getServerStatusObject = () => {\r\n  // Se o último check foi há mais de 30 segundos, considera desatualizado\r\n  const isStale = !serverStatus.lastCheck || \r\n                 (new Date() - serverStatus.lastCheck) > 30000;\r\n  \r\n  return {\r\n    ...serverStatus,\r\n    stale: isStale\r\n  };\r\n};\r\n\r\n// Buscar todas as equipes\r\nexport const getEquipes = async () => {\r\n  try {\r\n    console.log('Buscando todas as equipes...');\r\n    const response = await api.get('/equipes');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Erro ao buscar equipes:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Buscar uma equipe específica\r\nexport const getEquipe = async (id) => {\r\n  try {\r\n    const response = await api.get(`/equipes/${id}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Erro ao buscar equipe ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Criar uma nova equipe\r\nexport const createEquipe = async (equipe) => {\r\n  try {\r\n    console.log('Enviando dados para criar equipe:', equipe);\r\n    \r\n    // Validar dados\r\n    if (!equipe.nome) {\r\n      throw new Error('Nome da equipe é obrigatório');\r\n    }\r\n    \r\n    const response = await api.post('/equipes', equipe);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Erro ao criar equipe:', error);\r\n    \r\n    if (!error.response && error.message.includes('Network Error')) {\r\n      error.customMessage = 'Falha na conexão com o servidor. Verifique se o backend está rodando e acessível.';\r\n    } else if (error.response) {\r\n      error.customMessage = error.response.data?.error || 'Erro ao criar equipe';\r\n    } else {\r\n      error.customMessage = error.message || 'Erro desconhecido ao criar equipe';\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// Atualizar uma equipe existente\r\nexport const updateEquipe = async (id, equipe) => {\r\n  try {\r\n    const response = await api.put(`/equipes/${id}`, equipe);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Erro ao atualizar equipe ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Excluir uma equipe\r\nexport const deleteEquipe = async (id) => {\r\n  try {\r\n    const response = await api.delete(`/equipes/${id}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Erro ao excluir equipe ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Verificar vagas disponíveis em uma equipe\r\nexport const verificarVagasEquipe = async (id) => {\r\n  try {\r\n    const response = await api.get(`/equipes/${id}/vagas`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Erro ao verificar vagas da equipe ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}