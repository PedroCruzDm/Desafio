{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:3001/equipes';\n\n// Configurar axios com timeout e retries\nconst api = axios.create({\n  baseURL: 'http://localhost:3001',\n  timeout: 10000,\n  // 10 segundos\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Log para todas as requisições\napi.interceptors.request.use(config => {\n  console.log(`[API Request] ${config.method.toUpperCase()} ${config.url}`, config.data || '');\n  return config;\n}, error => {\n  console.error('[API Request Error]', error);\n  return Promise.reject(error);\n});\n\n// Log para todas as respostas\napi.interceptors.response.use(response => {\n  console.log(`[API Response] Status: ${response.status}`, response.data);\n  return response;\n}, error => {\n  // Log detalhado do erro\n  if (error.response) {\n    // O servidor respondeu com um status fora do intervalo 2xx\n    console.error(`[API Error] Status: ${error.response.status}`, error.response.data);\n  } else if (error.request) {\n    // A requisição foi feita mas não houve resposta\n    console.error('[API Error] Sem resposta:', error.request);\n  } else {\n    // Algo aconteceu na configuração da requisição\n    console.error('[API Error] Erro de configuração:', error.message);\n  }\n  return Promise.reject(error);\n});\n\n// Verificar conexão com o backend\nexport const checkApiConnection = async () => {\n  try {\n    const response = await api.get('/ping');\n    return response.data.status === 'ok';\n  } catch (error) {\n    console.error('Erro ao verificar conexão com a API:', error);\n    return false;\n  }\n};\n\n// Verificar conexão com o banco de dados\nexport const checkDbConnection = async () => {\n  try {\n    const response = await api.get('/check-db');\n    return response.data.status === 'ok';\n  } catch (error) {\n    console.error('Erro ao verificar conexão com o banco de dados:', error);\n    return false;\n  }\n};\n\n// Buscar todas as equipes\nexport const getEquipes = async () => {\n  try {\n    const response = await api.get('/equipes');\n    return response.data;\n  } catch (error) {\n    console.error('Erro ao buscar equipes:', error);\n    throw error;\n  }\n};\n\n// Buscar uma equipe específica\nexport const getEquipe = async id => {\n  try {\n    const response = await api.get(`${API_URL}/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Erro ao buscar equipe ${id}:`, error);\n    throw error;\n  }\n};\n\n// Criar uma nova equipe\nexport const createEquipe = async equipe => {\n  try {\n    console.log('Enviando dados para criar equipe:', equipe);\n\n    // Validar os dados antes de enviar\n    const equipeValidada = {\n      nome: equipe.nome,\n      descricao: equipe.descricao || '',\n      responsavel: equipe.responsavel || '',\n      max_participantes: parseInt(equipe.max_participantes) || 10\n    };\n\n    // Testar primeiro a conexão com a API\n    const apiOnline = await checkApiConnection();\n    if (!apiOnline) {\n      throw new Error('Não foi possível conectar ao servidor. Verifique se o backend está rodando.');\n    }\n    const response = await api.post('/equipes', equipeValidada);\n    return response.data;\n  } catch (error) {\n    console.error('Erro ao criar equipe:', error);\n\n    // Customizar a mensagem de erro\n    if (!error.response) {\n      error.customMessage = 'Falha na conexão com o servidor. Verifique sua conexão de rede e se o backend está rodando.';\n    } else if (error.response.status === 400) {\n      error.customMessage = `Dados inválidos: ${error.response.data.error}`;\n    } else {\n      var _error$response, _error$response$data;\n      error.customMessage = `Erro ao criar equipe: ${((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || error.message}`;\n    }\n    throw error;\n  }\n};\n\n// Atualizar uma equipe existente\nexport const updateEquipe = async (id, equipe) => {\n  try {\n    const response = await axios.put(`${API_URL}/${id}`, equipe);\n    return response.data;\n  } catch (error) {\n    console.error(`Erro ao atualizar equipe ${id}:`, error);\n    throw error;\n  }\n};\n\n// Excluir uma equipe\nexport const deleteEquipe = async id => {\n  try {\n    const response = await axios.delete(`${API_URL}/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Erro ao excluir equipe ${id}:`, error);\n    throw error;\n  }\n};\n\n// Buscar participantes de uma equipe\nexport const getParticipantesEquipe = async id => {\n  try {\n    const response = await axios.get(`${API_URL}/${id}/participantes`);\n    return response.data;\n  } catch (error) {\n    console.error(`Erro ao buscar participantes da equipe ${id}:`, error);\n    throw error;\n  }\n};\n\n// Verificar vagas disponíveis em uma equipe\nexport const verificarVagasEquipe = async id => {\n  try {\n    const response = await axios.get(`${API_URL}/${id}/vagas`);\n    return response.data;\n  } catch (error) {\n    console.error(`Erro ao verificar vagas da equipe ${id}:`, error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","console","log","method","toUpperCase","url","data","error","Promise","reject","response","status","message","checkApiConnection","get","checkDbConnection","getEquipes","getEquipe","id","createEquipe","equipe","equipeValidada","nome","descricao","responsavel","max_participantes","parseInt","apiOnline","Error","post","customMessage","_error$response","_error$response$data","updateEquipe","put","deleteEquipe","delete","getParticipantesEquipe","verificarVagasEquipe"],"sources":["C:/Users/joaop/OneDrive/Documentos/atividades/desafios/Desafio1/frontend/src/services/equipeService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:3001/equipes';\r\n\r\n// Configurar axios com timeout e retries\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:3001',\r\n  timeout: 10000, // 10 segundos\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\n// Log para todas as requisições\r\napi.interceptors.request.use(\r\n  config => {\r\n    console.log(`[API Request] ${config.method.toUpperCase()} ${config.url}`, config.data || '');\r\n    return config;\r\n  },\r\n  error => {\r\n    console.error('[API Request Error]', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Log para todas as respostas\r\napi.interceptors.response.use(\r\n  response => {\r\n    console.log(`[API Response] Status: ${response.status}`, response.data);\r\n    return response;\r\n  },\r\n  error => {\r\n    // Log detalhado do erro\r\n    if (error.response) {\r\n      // O servidor respondeu com um status fora do intervalo 2xx\r\n      console.error(`[API Error] Status: ${error.response.status}`, error.response.data);\r\n    } else if (error.request) {\r\n      // A requisição foi feita mas não houve resposta\r\n      console.error('[API Error] Sem resposta:', error.request);\r\n    } else {\r\n      // Algo aconteceu na configuração da requisição\r\n      console.error('[API Error] Erro de configuração:', error.message);\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Verificar conexão com o backend\r\nexport const checkApiConnection = async () => {\r\n  try {\r\n    const response = await api.get('/ping');\r\n    return response.data.status === 'ok';\r\n  } catch (error) {\r\n    console.error('Erro ao verificar conexão com a API:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Verificar conexão com o banco de dados\r\nexport const checkDbConnection = async () => {\r\n  try {\r\n    const response = await api.get('/check-db');\r\n    return response.data.status === 'ok';\r\n  } catch (error) {\r\n    console.error('Erro ao verificar conexão com o banco de dados:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Buscar todas as equipes\r\nexport const getEquipes = async () => {\r\n  try {\r\n    const response = await api.get('/equipes');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Erro ao buscar equipes:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Buscar uma equipe específica\r\nexport const getEquipe = async (id) => {\r\n  try {\r\n    const response = await api.get(`${API_URL}/${id}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Erro ao buscar equipe ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Criar uma nova equipe\r\nexport const createEquipe = async (equipe) => {\r\n  try {\r\n    console.log('Enviando dados para criar equipe:', equipe);\r\n    \r\n    // Validar os dados antes de enviar\r\n    const equipeValidada = {\r\n      nome: equipe.nome,\r\n      descricao: equipe.descricao || '',\r\n      responsavel: equipe.responsavel || '',\r\n      max_participantes: parseInt(equipe.max_participantes) || 10\r\n    };\r\n    \r\n    // Testar primeiro a conexão com a API\r\n    const apiOnline = await checkApiConnection();\r\n    if (!apiOnline) {\r\n      throw new Error('Não foi possível conectar ao servidor. Verifique se o backend está rodando.');\r\n    }\r\n    \r\n    const response = await api.post('/equipes', equipeValidada);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Erro ao criar equipe:', error);\r\n    \r\n    // Customizar a mensagem de erro\r\n    if (!error.response) {\r\n      error.customMessage = 'Falha na conexão com o servidor. Verifique sua conexão de rede e se o backend está rodando.';\r\n    } else if (error.response.status === 400) {\r\n      error.customMessage = `Dados inválidos: ${error.response.data.error}`;\r\n    } else {\r\n      error.customMessage = `Erro ao criar equipe: ${error.response?.data?.error || error.message}`;\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// Atualizar uma equipe existente\r\nexport const updateEquipe = async (id, equipe) => {\r\n  try {\r\n    const response = await axios.put(`${API_URL}/${id}`, equipe);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Erro ao atualizar equipe ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Excluir uma equipe\r\nexport const deleteEquipe = async (id) => {\r\n  try {\r\n    const response = await axios.delete(`${API_URL}/${id}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Erro ao excluir equipe ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Buscar participantes de uma equipe\r\nexport const getParticipantesEquipe = async (id) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/${id}/participantes`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Erro ao buscar participantes da equipe ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Verificar vagas disponíveis em uma equipe\r\nexport const verificarVagasEquipe = async (id) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/${id}/vagas`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Erro ao verificar vagas da equipe ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}