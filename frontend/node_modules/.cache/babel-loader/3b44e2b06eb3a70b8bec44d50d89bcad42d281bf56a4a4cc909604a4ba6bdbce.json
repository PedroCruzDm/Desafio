{"ast":null,"code":"import axios from 'axios';\n\n// Corrigir a URL base da API\n// Observo que o frontend tenta acessar a porta 3001, mas o Dashboard.jsx tenta acessar a porta 5000\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Configuração do axios\nconst api = axios.create({\n  baseURL: API_URL,\n  timeout: 8000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Log para depuração\nconsole.log('API está configurada para:', API_URL);\n\n// Interceptors para logs\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`[Requisição API] ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} ${config.url}`);\n  return config;\n}, error => {\n  console.error('[Erro na requisição]', error);\n  return Promise.reject(error);\n});\napi.interceptors.response.use(response => {\n  console.log(`[Resposta API] Status: ${response.status}`, response.data);\n  return response;\n}, error => {\n  if (error.response) {\n    console.error(`[Erro API] Status: ${error.response.status}`, error.response.data);\n  } else if (error.request) {\n    console.error('[Erro API] Sem resposta do servidor', error.request);\n  } else {\n    console.error('[Erro API]', error.message);\n  }\n  return Promise.reject(error);\n});\n\n// Mock de dados para usar quando o backend estiver offline\nconst MOCK_EQUIPES = [{\n  id: 1,\n  nome: 'Equipe A (Offline)',\n  descricao: 'Dados offline',\n  responsavel: 'Sistema',\n  max_participantes: 10\n}, {\n  id: 2,\n  nome: 'Equipe B (Offline)',\n  descricao: 'Dados offline',\n  responsavel: 'Sistema',\n  max_participantes: 5\n}];\n\n// Verifica se está online\nlet isOnline = false;\nconst checkOnlineStatus = async () => {\n  try {\n    await api.get('/status');\n    isOnline = true;\n    return true;\n  } catch (error) {\n    isOnline = false;\n    console.warn('Sistema operando em modo offline');\n    return false;\n  }\n};\n\n// Inicializa o status online\ncheckOnlineStatus();\n\n// Buscar todas as equipes\nexport const getEquipes = async () => {\n  try {\n    if (!isOnline) {\n      console.log('Retornando dados mockados para equipes');\n      return MOCK_EQUIPES;\n    }\n    const response = await api.get('/equipes');\n    return response.data;\n  } catch (error) {\n    console.error('Erro ao buscar equipes:', error);\n    // Se o erro for de conexão, retorna dados mockados\n    if (!error.response) {\n      console.log('Usando dados mockados após falha na requisição');\n      return MOCK_EQUIPES;\n    }\n    throw error;\n  }\n};\n\n// Buscar uma equipe específica\nexport const getEquipe = async id => {\n  try {\n    if (!isOnline) {\n      const mockEquipe = MOCK_EQUIPES.find(e => e.id === parseInt(id));\n      if (mockEquipe) return mockEquipe;\n      throw new Error('Equipe não encontrada nos dados offline');\n    }\n    const response = await api.get(`/equipes/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Erro ao buscar equipe ${id}:`, error);\n    // Se o erro for de conexão, tenta buscar nos dados mockados\n    if (!error.response) {\n      const mockEquipe = MOCK_EQUIPES.find(e => e.id === parseInt(id));\n      if (mockEquipe) return mockEquipe;\n    }\n    throw error;\n  }\n};\n\n// Criar uma nova equipe\nexport const createEquipe = async equipe => {\n  try {\n    // Verificar online status antes de tentar criar\n    if (!isOnline) {\n      await checkOnlineStatus();\n      if (!isOnline) {\n        throw new Error('Não é possível criar uma equipe em modo offline. Por favor, verifique sua conexão com o servidor.');\n      }\n    }\n    console.log('Enviando dados para criar equipe:', equipe);\n    const response = await api.post('/equipes', equipe);\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    console.error('Erro ao criar equipe:', error);\n    // Customizar mensagem de erro\n    error.customMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Não foi possível criar a equipe. Verifique se o servidor está rodando.';\n    throw error;\n  }\n};\n\n// Atualizar uma equipe existente\nexport const updateEquipe = async (id, equipe) => {\n  try {\n    // Verificar online status antes de tentar atualizar\n    if (!isOnline) {\n      await checkOnlineStatus();\n      if (!isOnline) {\n        throw new Error('Não é possível atualizar uma equipe em modo offline. Por favor, verifique sua conexão com o servidor.');\n      }\n    }\n    const response = await api.put(`/equipes/${id}`, equipe);\n    return response.data;\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    console.error(`Erro ao atualizar equipe ${id}:`, error);\n    // Customizar mensagem de erro\n    error.customMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Não foi possível atualizar a equipe. Verifique se o servidor está rodando.';\n    throw error;\n  }\n};\n\n// Excluir uma equipe\nexport const deleteEquipe = async id => {\n  try {\n    // Verificar online status antes de tentar excluir\n    if (!isOnline) {\n      await checkOnlineStatus();\n      if (!isOnline) {\n        throw new Error('Não é possível excluir uma equipe em modo offline. Por favor, verifique sua conexão com o servidor.');\n      }\n    }\n    const response = await api.delete(`/equipes/${id}`);\n    return response.data;\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n    console.error(`Erro ao excluir equipe ${id}:`, error);\n    // Customizar mensagem de erro\n    error.customMessage = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || 'Não foi possível excluir a equipe. Verifique se o servidor está rodando.';\n    throw error;\n  }\n};\n\n// Função para verificar status do servidor\nexport const checkServerStatus = async () => {\n  const online = await checkOnlineStatus();\n  return {\n    online,\n    message: online ? 'Servidor está online' : 'Servidor está offline'\n  };\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","console","log","interceptors","request","use","config","_config$method","method","toUpperCase","url","error","Promise","reject","response","status","data","message","MOCK_EQUIPES","id","nome","descricao","responsavel","max_participantes","isOnline","checkOnlineStatus","get","warn","getEquipes","getEquipe","mockEquipe","find","e","parseInt","Error","createEquipe","equipe","post","_error$response","_error$response$data","customMessage","updateEquipe","put","_error$response2","_error$response2$data","deleteEquipe","delete","_error$response3","_error$response3$data","checkServerStatus","online"],"sources":["C:/Users/joaop/OneDrive/Documentos/atividades/desafios/Desafio1/frontend/src/services/equipeService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Corrigir a URL base da API\r\n// Observo que o frontend tenta acessar a porta 3001, mas o Dashboard.jsx tenta acessar a porta 5000\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n// Configuração do axios\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  timeout: 8000,\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\n// Log para depuração\r\nconsole.log('API está configurada para:', API_URL);\r\n\r\n// Interceptors para logs\r\napi.interceptors.request.use(\r\n  config => {\r\n    console.log(`[Requisição API] ${config.method?.toUpperCase()} ${config.url}`);\r\n    return config;\r\n  },\r\n  error => {\r\n    console.error('[Erro na requisição]', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\napi.interceptors.response.use(\r\n  response => {\r\n    console.log(`[Resposta API] Status: ${response.status}`, response.data);\r\n    return response;\r\n  },\r\n  error => {\r\n    if (error.response) {\r\n      console.error(`[Erro API] Status: ${error.response.status}`, error.response.data);\r\n    } else if (error.request) {\r\n      console.error('[Erro API] Sem resposta do servidor', error.request);\r\n    } else {\r\n      console.error('[Erro API]', error.message);\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Mock de dados para usar quando o backend estiver offline\r\nconst MOCK_EQUIPES = [\r\n  { id: 1, nome: 'Equipe A (Offline)', descricao: 'Dados offline', responsavel: 'Sistema', max_participantes: 10 },\r\n  { id: 2, nome: 'Equipe B (Offline)', descricao: 'Dados offline', responsavel: 'Sistema', max_participantes: 5 }\r\n];\r\n\r\n// Verifica se está online\r\nlet isOnline = false;\r\nconst checkOnlineStatus = async () => {\r\n  try {\r\n    await api.get('/status');\r\n    isOnline = true;\r\n    return true;\r\n  } catch (error) {\r\n    isOnline = false;\r\n    console.warn('Sistema operando em modo offline');\r\n    return false;\r\n  }\r\n};\r\n\r\n// Inicializa o status online\r\ncheckOnlineStatus();\r\n\r\n// Buscar todas as equipes\r\nexport const getEquipes = async () => {\r\n  try {\r\n    if (!isOnline) {\r\n      console.log('Retornando dados mockados para equipes');\r\n      return MOCK_EQUIPES;\r\n    }\r\n\r\n    const response = await api.get('/equipes');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Erro ao buscar equipes:', error);\r\n    // Se o erro for de conexão, retorna dados mockados\r\n    if (!error.response) {\r\n      console.log('Usando dados mockados após falha na requisição');\r\n      return MOCK_EQUIPES;\r\n    }\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Buscar uma equipe específica\r\nexport const getEquipe = async (id) => {\r\n  try {\r\n    if (!isOnline) {\r\n      const mockEquipe = MOCK_EQUIPES.find(e => e.id === parseInt(id));\r\n      if (mockEquipe) return mockEquipe;\r\n      throw new Error('Equipe não encontrada nos dados offline');\r\n    }\r\n\r\n    const response = await api.get(`/equipes/${id}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Erro ao buscar equipe ${id}:`, error);\r\n    // Se o erro for de conexão, tenta buscar nos dados mockados\r\n    if (!error.response) {\r\n      const mockEquipe = MOCK_EQUIPES.find(e => e.id === parseInt(id));\r\n      if (mockEquipe) return mockEquipe;\r\n    }\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Criar uma nova equipe\r\nexport const createEquipe = async (equipe) => {\r\n  try {\r\n    // Verificar online status antes de tentar criar\r\n    if (!isOnline) {\r\n      await checkOnlineStatus();\r\n      if (!isOnline) {\r\n        throw new Error('Não é possível criar uma equipe em modo offline. Por favor, verifique sua conexão com o servidor.');\r\n      }\r\n    }\r\n    \r\n    console.log('Enviando dados para criar equipe:', equipe);\r\n    const response = await api.post('/equipes', equipe);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Erro ao criar equipe:', error);\r\n    // Customizar mensagem de erro\r\n    error.customMessage = error.response?.data?.error || \r\n                         'Não foi possível criar a equipe. Verifique se o servidor está rodando.';\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Atualizar uma equipe existente\r\nexport const updateEquipe = async (id, equipe) => {\r\n  try {\r\n    // Verificar online status antes de tentar atualizar\r\n    if (!isOnline) {\r\n      await checkOnlineStatus();\r\n      if (!isOnline) {\r\n        throw new Error('Não é possível atualizar uma equipe em modo offline. Por favor, verifique sua conexão com o servidor.');\r\n      }\r\n    }\r\n    \r\n    const response = await api.put(`/equipes/${id}`, equipe);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Erro ao atualizar equipe ${id}:`, error);\r\n    // Customizar mensagem de erro\r\n    error.customMessage = error.response?.data?.error || \r\n                         'Não foi possível atualizar a equipe. Verifique se o servidor está rodando.';\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Excluir uma equipe\r\nexport const deleteEquipe = async (id) => {\r\n  try {\r\n    // Verificar online status antes de tentar excluir\r\n    if (!isOnline) {\r\n      await checkOnlineStatus();\r\n      if (!isOnline) {\r\n        throw new Error('Não é possível excluir uma equipe em modo offline. Por favor, verifique sua conexão com o servidor.');\r\n      }\r\n    }\r\n    \r\n    const response = await api.delete(`/equipes/${id}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Erro ao excluir equipe ${id}:`, error);\r\n    // Customizar mensagem de erro\r\n    error.customMessage = error.response?.data?.error || \r\n                         'Não foi possível excluir a equipe. Verifique se o servidor está rodando.';\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Função para verificar status do servidor\r\nexport const checkServerStatus = async () => {\r\n  const online = await checkOnlineStatus();\r\n  return { \r\n    online, \r\n    message: online ? 'Servidor está online' : 'Servidor está offline' \r\n  };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}