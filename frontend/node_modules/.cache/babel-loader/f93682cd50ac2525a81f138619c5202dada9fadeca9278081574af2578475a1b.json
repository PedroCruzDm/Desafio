{"ast":null,"code":"import axios from 'axios';\n\n// Configuração da URL base da API\nconst API_URL = 'http://localhost:5000/api';\n\n// Configuração do axios com timeout\nconst api = axios.create({\n  baseURL: API_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Log da configuração para depuração\nconsole.log('API está configurada para:', API_URL);\n\n// Log de requisições\napi.interceptors.request.use(config => {\n  console.log('[API Request]', config.method.toUpperCase(), config.url, config.data || '');\n  return config;\n}, error => {\n  console.error('[API Request Error]', error);\n  return Promise.reject(error);\n});\n\n// Log de respostas\napi.interceptors.response.use(response => {\n  console.log('[API Response] Status:', response.status, response.data);\n  return response;\n}, error => {\n  if (error.response) {\n    console.log('[API Error] Status:', error.response.status, error.response.data);\n  } else if (error.request) {\n    console.error('[API Network Error]', error.message, error.request);\n  } else {\n    console.error('[API Error]', error.message);\n  }\n  return Promise.reject(error);\n});\n\n// Verificar status do servidor\nexport const checkServerStatus = async () => {\n  try {\n    const response = await api.get('/status');\n    return {\n      online: true,\n      message: response.data.message\n    };\n  } catch (error) {\n    console.error('Erro ao verificar status do servidor:', error);\n    return {\n      online: false,\n      message: 'Servidor offline'\n    };\n  }\n};\n\n// Buscar todas as equipes\nexport const getEquipes = async () => {\n  try {\n    console.log('Buscando todas as equipes...');\n    const response = await api.get('/equipes');\n    return response.data;\n  } catch (error) {\n    console.error('Erro ao buscar equipes:', error);\n    throw error;\n  }\n};\n\n// Buscar uma equipe específica\nexport const getEquipe = async id => {\n  try {\n    const response = await api.get(`/equipes/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Erro ao buscar equipe ${id}:`, error);\n    throw error;\n  }\n};\n\n// Criar uma nova equipe\nexport const createEquipe = async equipe => {\n  try {\n    console.log('Enviando dados para criar equipe:', equipe);\n\n    // Validar dados\n    if (!equipe.nome) {\n      throw new Error('Nome da equipe é obrigatório');\n    }\n    const response = await api.post('/equipes', equipe);\n    return response.data;\n  } catch (error) {\n    console.error('Erro ao criar equipe:', error);\n    if (!error.response && error.message.includes('Network Error')) {\n      error.customMessage = 'Falha na conexão com o servidor. Verifique se o backend está rodando e acessível.';\n    } else if (error.response) {\n      var _error$response$data;\n      error.customMessage = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Erro ao criar equipe';\n    } else {\n      error.customMessage = error.message || 'Erro desconhecido ao criar equipe';\n    }\n    throw error;\n  }\n};\n\n// Atualizar uma equipe existente\nexport const updateEquipe = async (id, equipe) => {\n  try {\n    const response = await api.put(`/equipes/${id}`, equipe);\n    return response.data;\n  } catch (error) {\n    console.error(`Erro ao atualizar equipe ${id}:`, error);\n    throw error;\n  }\n};\n\n// Excluir uma equipe\nexport const deleteEquipe = async id => {\n  try {\n    const response = await api.delete(`/equipes/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Erro ao excluir equipe ${id}:`, error);\n    throw error;\n  }\n};\n\n// Verificar vagas disponíveis em uma equipe\nexport const verificarVagasEquipe = async id => {\n  try {\n    const response = await api.get(`/equipes/${id}/vagas`);\n    return response.data;\n  } catch (error) {\n    console.error(`Erro ao verificar vagas da equipe ${id}:`, error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","timeout","headers","console","log","interceptors","request","use","config","method","toUpperCase","url","data","error","Promise","reject","response","status","message","checkServerStatus","get","online","getEquipes","getEquipe","id","createEquipe","equipe","nome","Error","post","includes","customMessage","_error$response$data","updateEquipe","put","deleteEquipe","delete","verificarVagasEquipe"],"sources":["C:/Users/joaop/OneDrive/Documentos/atividades/desafios/Desafio1/frontend/src/services/equipeService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Configuração da URL base da API\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\n// Configuração do axios com timeout\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\n// Log da configuração para depuração\r\nconsole.log('API está configurada para:', API_URL);\r\n\r\n// Log de requisições\r\napi.interceptors.request.use(\r\n  config => {\r\n    console.log('[API Request]', config.method.toUpperCase(), config.url, config.data || '');\r\n    return config;\r\n  },\r\n  error => {\r\n    console.error('[API Request Error]', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Log de respostas\r\napi.interceptors.response.use(\r\n  response => {\r\n    console.log('[API Response] Status:', response.status, response.data);\r\n    return response;\r\n  },\r\n  error => {\r\n    if (error.response) {\r\n      console.log('[API Error] Status:', error.response.status, error.response.data);\r\n    } else if (error.request) {\r\n      console.error('[API Network Error]', error.message, error.request);\r\n    } else {\r\n      console.error('[API Error]', error.message);\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Verificar status do servidor\r\nexport const checkServerStatus = async () => {\r\n  try {\r\n    const response = await api.get('/status');\r\n    return { online: true, message: response.data.message };\r\n  } catch (error) {\r\n    console.error('Erro ao verificar status do servidor:', error);\r\n    return { online: false, message: 'Servidor offline' };\r\n  }\r\n};\r\n\r\n// Buscar todas as equipes\r\nexport const getEquipes = async () => {\r\n  try {\r\n    console.log('Buscando todas as equipes...');\r\n    const response = await api.get('/equipes');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Erro ao buscar equipes:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Buscar uma equipe específica\r\nexport const getEquipe = async (id) => {\r\n  try {\r\n    const response = await api.get(`/equipes/${id}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Erro ao buscar equipe ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Criar uma nova equipe\r\nexport const createEquipe = async (equipe) => {\r\n  try {\r\n    console.log('Enviando dados para criar equipe:', equipe);\r\n    \r\n    // Validar dados\r\n    if (!equipe.nome) {\r\n      throw new Error('Nome da equipe é obrigatório');\r\n    }\r\n    \r\n    const response = await api.post('/equipes', equipe);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Erro ao criar equipe:', error);\r\n    \r\n    if (!error.response && error.message.includes('Network Error')) {\r\n      error.customMessage = 'Falha na conexão com o servidor. Verifique se o backend está rodando e acessível.';\r\n    } else if (error.response) {\r\n      error.customMessage = error.response.data?.error || 'Erro ao criar equipe';\r\n    } else {\r\n      error.customMessage = error.message || 'Erro desconhecido ao criar equipe';\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// Atualizar uma equipe existente\r\nexport const updateEquipe = async (id, equipe) => {\r\n  try {\r\n    const response = await api.put(`/equipes/${id}`, equipe);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Erro ao atualizar equipe ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Excluir uma equipe\r\nexport const deleteEquipe = async (id) => {\r\n  try {\r\n    const response = await api.delete(`/equipes/${id}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Erro ao excluir equipe ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Verificar vagas disponíveis em uma equipe\r\nexport const verificarVagasEquipe = async (id) => {\r\n  try {\r\n    const response = await api.get(`/equipes/${id}/vagas`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Erro ao verificar vagas da equipe ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}